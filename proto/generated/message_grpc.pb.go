// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pbdata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TransmitServiceClient is the client API for TransmitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransmitServiceClient interface {
	SendData(ctx context.Context, in *ServiceReq, opts ...grpc.CallOption) (*ServiceRsp, error)
	SendData2(ctx context.Context, in *ServiceReq, opts ...grpc.CallOption) (*Empty, error)
}

type transmitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransmitServiceClient(cc grpc.ClientConnInterface) TransmitServiceClient {
	return &transmitServiceClient{cc}
}

func (c *transmitServiceClient) SendData(ctx context.Context, in *ServiceReq, opts ...grpc.CallOption) (*ServiceRsp, error) {
	out := new(ServiceRsp)
	err := c.cc.Invoke(ctx, "/pbdata.TransmitService/SendData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transmitServiceClient) SendData2(ctx context.Context, in *ServiceReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pbdata.TransmitService/SendData2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransmitServiceServer is the server API for TransmitService service.
// All implementations must embed UnimplementedTransmitServiceServer
// for forward compatibility
type TransmitServiceServer interface {
	SendData(context.Context, *ServiceReq) (*ServiceRsp, error)
	SendData2(context.Context, *ServiceReq) (*Empty, error)
	mustEmbedUnimplementedTransmitServiceServer()
}

// UnimplementedTransmitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransmitServiceServer struct {
}

func (UnimplementedTransmitServiceServer) SendData(context.Context, *ServiceReq) (*ServiceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedTransmitServiceServer) SendData2(context.Context, *ServiceReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendData2 not implemented")
}
func (UnimplementedTransmitServiceServer) mustEmbedUnimplementedTransmitServiceServer() {}

// UnsafeTransmitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransmitServiceServer will
// result in compilation errors.
type UnsafeTransmitServiceServer interface {
	mustEmbedUnimplementedTransmitServiceServer()
}

func RegisterTransmitServiceServer(s *grpc.Server, srv TransmitServiceServer) {
	s.RegisterService(&_TransmitService_serviceDesc, srv)
}

func _TransmitService_SendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransmitServiceServer).SendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbdata.TransmitService/SendData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransmitServiceServer).SendData(ctx, req.(*ServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransmitService_SendData2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransmitServiceServer).SendData2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbdata.TransmitService/SendData2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransmitServiceServer).SendData2(ctx, req.(*ServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransmitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbdata.TransmitService",
	HandlerType: (*TransmitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendData",
			Handler:    _TransmitService_SendData_Handler,
		},
		{
			MethodName: "SendData2",
			Handler:    _TransmitService_SendData2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
